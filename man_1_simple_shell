.TH HSH 1 "April 2020" "Hippokampoiers Cali Cohort 11 1.0" "simple_shell man page"
.SH NAME
.B hsh
- command interpreter (simple shell)
.SH SYNOPSIS
hsh [file_name]
.SH DESCRIPTION
.B hsh
is the standard command interpreter for the system. The current version of the simple shell is not a clone of the Bash shell, it is a program in process.
This man page is not intended to be a tutorial or a complete specification of the shell.

.SS Overview
The shell is a command that reads lines from either a file or the terminal, interprets them, and generally executes other commands.  It is the program that
is running when a user logs into the system. The shell implements a language that has flow control constructs, a macro facility that provides a variety of 
features in addition to data storage, along with built in history and line editing capabilities. It incorporates many features to aid interactive use and 
has the advantage that the interpretative language is common to both interactive and non-interactive use (shell scripts). That is, commands can be typed 
directly to the running shell or can be put into a file and the file can be executed directly by the shell.

.SS Invocation
If command line arguments besides the options have been specified, then the shell treats the first argument as the name of a file from which to read commands 
(a shell script), and the remaining arguments are set as the positional parameters of the shell ($1, $2, etc).  Otherwise, the shell reads commands from its 
standard input.

.SS Commands
The shell interprets the words it reads according to a language, the specification of which is outside the scope of this man page (refer to the BNF in the POSIX 
1003.2 document). Essentially though, a line is read and if the first word of the line (or after a control operator) is not a reserved word, then the shell has 
recognized a simple command. Otherwise, a complex command or some other special construct may have been recognized.

.SS Search and Execution
There are three types of commands: shell functions, builtin commands, and normal programs -- and the command is searched for (by name) in that order. They each
are executed in a different way.

When a shell function is executed, all of the shell positional parameters (except $0, which remains unchanged) are set to the arguments of the shell function.
The variables which are explicitly placed in the environment of the command (by placing assignments to them before the function name) are made local to the
function and are set to the values given. Then the command given in the function definition is executed. The positional parameters are restored to their 
original values when the command completes. This all occurs within the current shell.

Shell built-in commands are executed internally to the shell, without spawning a new process. There are	two kinds of built-in commands: regular and special. 
Assignments before special builtins persist after they finish executing and assignment errors, redirection errors and certain operand errors cause a script to 
be aborted. Special builtins cannot be overridden with a function. Both regular and special builtins can affect the shell in ways normal programs cannot.

Otherwise, if the command name does not match a function or built-in command, the command is searched for as a normal program in the file system. When a normal 
program is executed, the shell runs the program, passing the arguments and the environment to the program. If the program is not a normal executable file (i.e., 
if it does not begin with the "magic number" whose ASCII representation is "#!", so execve(2) returns ENOEXEC then) the shell will interpret the program in a 
subshell. The child shell will reinitialize itself in this case, so that the effect will be as if a new shell had been invoked to handle the ad-hoc shell script, 
except that the location of hashed commands located in the parent shell will be remembered by the child.

.SS Path Search
When locating a command, the shell first looks to see if it has a shell function by that name. Then it looks for a builtin command by that name. If a builtin 
command is not found, one of two things happen:

1.   Command names containing a slash are simply executed without performing any searches.

2.   The shell searches each entry in PATH in turn for the command. The value of the PATH variable should be a series of entries separated by colons. Each entry 
consists of a directory name. The current directory may be indicated implicitly by an empty directory name, or explicitly by a single period.

.SS Command Exit Status
Each command has an exit status that can influence the behaviour of other shell commands. The paradigm is that a command exits with zero for normal or success, 
and non-zero for failure, error, or a false indication. The man page for each command should indicate the various exit codes and what they mean. Additionally, the 
builtin commands return exit codes, as does an executed shell function.

If a command consists entirely of variable assignments then the exit status of the command is that of the last command substitution if any, otherwise 0.

.SH EXIT STATUS
Errors that are detected by the shell, such as a syntax error, will cause the shell to exit with a non-zero exit status. If the shell is not an interactive shell, 
the execution of the shell file will be aborted. Otherwise the shell will return the exit status of the last command executed, or if the 
.B exit
builtin is used with a numeric argument, it will return the argument.

.SH EXAMPLES


.SH BUGS
No known bugs.

Report bugs to Laura Villan (laura.villan@holbertonschool.com) or Emma Navarro Millán (emma.navarro@holbertonschool.com)

.SH AUTHORS
Laura Villan & Emma Navarro Millán
